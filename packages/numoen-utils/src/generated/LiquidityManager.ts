/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace LiquidityManager {
  export type CollectParamsStruct = {
    tokenID: PromiseOrValue<BigNumberish>;
    recipient: PromiseOrValue<string>;
    amountRequested: PromiseOrValue<BigNumberish>;
  };

  export type CollectParamsStructOutput = [BigNumber, string, BigNumber] & {
    tokenID: BigNumber;
    recipient: string;
    amountRequested: BigNumber;
  };

  export type DecreaseLiquidityParamsStruct = {
    tokenID: PromiseOrValue<BigNumberish>;
    liquidity: PromiseOrValue<BigNumberish>;
    amount0Min: PromiseOrValue<BigNumberish>;
    amount1Min: PromiseOrValue<BigNumberish>;
    recipient: PromiseOrValue<string>;
    deadline: PromiseOrValue<BigNumberish>;
  };

  export type DecreaseLiquidityParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ] & {
    tokenID: BigNumber;
    liquidity: BigNumber;
    amount0Min: BigNumber;
    amount1Min: BigNumber;
    recipient: string;
    deadline: BigNumber;
  };

  export type IncreaseLiquidityParamsStruct = {
    tokenID: PromiseOrValue<BigNumberish>;
    amount0Min: PromiseOrValue<BigNumberish>;
    amount1Min: PromiseOrValue<BigNumberish>;
    liquidity: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
  };

  export type IncreaseLiquidityParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    tokenID: BigNumber;
    amount0Min: BigNumber;
    amount1Min: BigNumber;
    liquidity: BigNumber;
    deadline: BigNumber;
  };

  export type MintParamsStruct = {
    base: PromiseOrValue<string>;
    speculative: PromiseOrValue<string>;
    baseScaleFactor: PromiseOrValue<BigNumberish>;
    speculativeScaleFactor: PromiseOrValue<BigNumberish>;
    upperBound: PromiseOrValue<BigNumberish>;
    amount0Min: PromiseOrValue<BigNumberish>;
    amount1Min: PromiseOrValue<BigNumberish>;
    liquidity: PromiseOrValue<BigNumberish>;
    recipient: PromiseOrValue<string>;
    deadline: PromiseOrValue<BigNumberish>;
  };

  export type MintParamsStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ] & {
    base: string;
    speculative: string;
    baseScaleFactor: BigNumber;
    speculativeScaleFactor: BigNumber;
    upperBound: BigNumber;
    amount0Min: BigNumber;
    amount1Min: BigNumber;
    liquidity: BigNumber;
    recipient: string;
    deadline: BigNumber;
  };

  export type SkimParamsStruct = {
    base: PromiseOrValue<string>;
    speculative: PromiseOrValue<string>;
    baseScaleFactor: PromiseOrValue<BigNumberish>;
    speculativeScaleFactor: PromiseOrValue<BigNumberish>;
    upperBound: PromiseOrValue<BigNumberish>;
    recipient: PromiseOrValue<string>;
  };

  export type SkimParamsStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    base: string;
    speculative: string;
    baseScaleFactor: BigNumber;
    speculativeScaleFactor: BigNumber;
    upperBound: BigNumber;
    recipient: string;
  };
}

export interface LiquidityManagerInterface extends utils.Interface {
  functions: {
    "WETH9()": FunctionFragment;
    "collect((uint256,address,uint256))": FunctionFragment;
    "decreaseLiquidity((uint256,uint256,uint256,uint256,address,uint256))": FunctionFragment;
    "factory()": FunctionFragment;
    "getPosition(uint256)": FunctionFragment;
    "increaseLiquidity((uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "mint((address,address,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256))": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "refundETH()": FunctionFragment;
    "skim((address,address,uint256,uint256,uint256,address))": FunctionFragment;
    "sweepToken(address,uint256,address)": FunctionFragment;
    "unwrapWETH9(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "WETH9"
      | "collect"
      | "decreaseLiquidity"
      | "factory"
      | "getPosition"
      | "increaseLiquidity"
      | "mint"
      | "multicall"
      | "refundETH"
      | "skim"
      | "sweepToken"
      | "unwrapWETH9"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "WETH9", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collect",
    values: [LiquidityManager.CollectParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseLiquidity",
    values: [LiquidityManager.DecreaseLiquidityParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLiquidity",
    values: [LiquidityManager.IncreaseLiquidityParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [LiquidityManager.MintParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(functionFragment: "refundETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "skim",
    values: [LiquidityManager.SkimParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unwrapWETH9",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "WETH9", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refundETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "skim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweepToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unwrapWETH9",
    data: BytesLike
  ): Result;

  events: {
    "Collect(uint256,uint256)": EventFragment;
    "DecreaseLiquidity(uint256,uint256)": EventFragment;
    "IncreaseLiquidity(uint256,uint256,uint256,uint256)": EventFragment;
    "Mint(address,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Collect"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DecreaseLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreaseLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
}

export interface CollectEventObject {
  tokenID: BigNumber;
  amount: BigNumber;
}
export type CollectEvent = TypedEvent<
  [BigNumber, BigNumber],
  CollectEventObject
>;

export type CollectEventFilter = TypedEventFilter<CollectEvent>;

export interface DecreaseLiquidityEventObject {
  tokenID: BigNumber;
  liquidity: BigNumber;
}
export type DecreaseLiquidityEvent = TypedEvent<
  [BigNumber, BigNumber],
  DecreaseLiquidityEventObject
>;

export type DecreaseLiquidityEventFilter =
  TypedEventFilter<DecreaseLiquidityEvent>;

export interface IncreaseLiquidityEventObject {
  tokenID: BigNumber;
  liquidity: BigNumber;
  amount0: BigNumber;
  amount1: BigNumber;
}
export type IncreaseLiquidityEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  IncreaseLiquidityEventObject
>;

export type IncreaseLiquidityEventFilter =
  TypedEventFilter<IncreaseLiquidityEvent>;

export interface MintEventObject {
  operator: string;
  tokenID: BigNumber;
  liquidity: BigNumber;
  amount0: BigNumber;
  amount1: BigNumber;
}
export type MintEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  MintEventObject
>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface LiquidityManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LiquidityManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    WETH9(overrides?: CallOverrides): Promise<[string]>;

    collect(
      params: LiquidityManager.CollectParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decreaseLiquidity(
      params: LiquidityManager.DecreaseLiquidityParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getPosition(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        operator: string;
        base: string;
        speculative: string;
        baseScaleFactor: BigNumber;
        speculativeScaleFactor: BigNumber;
        upperBound: BigNumber;
        liquidity: BigNumber;
        rewardPerLiquidityPaid: BigNumber;
        tokensOwed: BigNumber;
      }
    >;

    increaseLiquidity(
      params: LiquidityManager.IncreaseLiquidityParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mint(
      params: LiquidityManager.MintParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    refundETH(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    skim(
      params: LiquidityManager.SkimParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sweepToken(
      token: PromiseOrValue<string>,
      amountMinimum: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unwrapWETH9(
      amountMinimum: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  WETH9(overrides?: CallOverrides): Promise<string>;

  collect(
    params: LiquidityManager.CollectParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decreaseLiquidity(
    params: LiquidityManager.DecreaseLiquidityParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  getPosition(
    tokenID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      operator: string;
      base: string;
      speculative: string;
      baseScaleFactor: BigNumber;
      speculativeScaleFactor: BigNumber;
      upperBound: BigNumber;
      liquidity: BigNumber;
      rewardPerLiquidityPaid: BigNumber;
      tokensOwed: BigNumber;
    }
  >;

  increaseLiquidity(
    params: LiquidityManager.IncreaseLiquidityParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mint(
    params: LiquidityManager.MintParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multicall(
    data: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  refundETH(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  skim(
    params: LiquidityManager.SkimParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sweepToken(
    token: PromiseOrValue<string>,
    amountMinimum: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unwrapWETH9(
    amountMinimum: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    WETH9(overrides?: CallOverrides): Promise<string>;

    collect(
      params: LiquidityManager.CollectParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreaseLiquidity(
      params: LiquidityManager.DecreaseLiquidityParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    getPosition(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        operator: string;
        base: string;
        speculative: string;
        baseScaleFactor: BigNumber;
        speculativeScaleFactor: BigNumber;
        upperBound: BigNumber;
        liquidity: BigNumber;
        rewardPerLiquidityPaid: BigNumber;
        tokensOwed: BigNumber;
      }
    >;

    increaseLiquidity(
      params: LiquidityManager.IncreaseLiquidityParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    mint(
      params: LiquidityManager.MintParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    refundETH(overrides?: CallOverrides): Promise<void>;

    skim(
      params: LiquidityManager.SkimParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    sweepToken(
      token: PromiseOrValue<string>,
      amountMinimum: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unwrapWETH9(
      amountMinimum: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Collect(uint256,uint256)"(
      tokenID?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): CollectEventFilter;
    Collect(
      tokenID?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): CollectEventFilter;

    "DecreaseLiquidity(uint256,uint256)"(
      tokenID?: PromiseOrValue<BigNumberish> | null,
      liquidity?: null
    ): DecreaseLiquidityEventFilter;
    DecreaseLiquidity(
      tokenID?: PromiseOrValue<BigNumberish> | null,
      liquidity?: null
    ): DecreaseLiquidityEventFilter;

    "IncreaseLiquidity(uint256,uint256,uint256,uint256)"(
      tokenID?: PromiseOrValue<BigNumberish> | null,
      liquidity?: null,
      amount0?: null,
      amount1?: null
    ): IncreaseLiquidityEventFilter;
    IncreaseLiquidity(
      tokenID?: PromiseOrValue<BigNumberish> | null,
      liquidity?: null,
      amount0?: null,
      amount1?: null
    ): IncreaseLiquidityEventFilter;

    "Mint(address,uint256,uint256,uint256,uint256)"(
      operator?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null,
      liquidity?: null,
      amount0?: null,
      amount1?: null
    ): MintEventFilter;
    Mint(
      operator?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null,
      liquidity?: null,
      amount0?: null,
      amount1?: null
    ): MintEventFilter;
  };

  estimateGas: {
    WETH9(overrides?: CallOverrides): Promise<BigNumber>;

    collect(
      params: LiquidityManager.CollectParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decreaseLiquidity(
      params: LiquidityManager.DecreaseLiquidityParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getPosition(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseLiquidity(
      params: LiquidityManager.IncreaseLiquidityParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mint(
      params: LiquidityManager.MintParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    refundETH(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    skim(
      params: LiquidityManager.SkimParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sweepToken(
      token: PromiseOrValue<string>,
      amountMinimum: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unwrapWETH9(
      amountMinimum: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WETH9(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collect(
      params: LiquidityManager.CollectParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decreaseLiquidity(
      params: LiquidityManager.DecreaseLiquidityParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPosition(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseLiquidity(
      params: LiquidityManager.IncreaseLiquidityParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      params: LiquidityManager.MintParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    refundETH(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    skim(
      params: LiquidityManager.SkimParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sweepToken(
      token: PromiseOrValue<string>,
      amountMinimum: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unwrapWETH9(
      amountMinimum: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

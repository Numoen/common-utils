/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface FactoryInterface extends utils.Interface {
  functions: {
    "createLendgine(address,address,uint256,uint256,uint256)": FunctionFragment;
    "getLendgine(address,address,uint256,uint256,uint256)": FunctionFragment;
    "pair()": FunctionFragment;
    "pairParameters()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createLendgine"
      | "getLendgine"
      | "pair"
      | "pairParameters"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createLendgine",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getLendgine",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "pair", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pairParameters",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createLendgine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendgine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pairParameters",
    data: BytesLike
  ): Result;

  events: {
    "LendgineCreated(address,address,uint256,uint256,uint256,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LendgineCreated"): EventFragment;
}

export interface LendgineCreatedEventObject {
  base: string;
  speculative: string;
  baseScaleFactor: BigNumber;
  speculativeScaleFactor: BigNumber;
  upperBound: BigNumber;
  lendgine: string;
  pair: string;
}
export type LendgineCreatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, string, string],
  LendgineCreatedEventObject
>;

export type LendgineCreatedEventFilter = TypedEventFilter<LendgineCreatedEvent>;

export interface Factory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createLendgine(
      base: PromiseOrValue<string>,
      speculative: PromiseOrValue<string>,
      baseScaleFactor: PromiseOrValue<BigNumberish>,
      speculativeScaleFactor: PromiseOrValue<BigNumberish>,
      upperBound: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getLendgine(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pair(overrides?: CallOverrides): Promise<[string]>;

    pairParameters(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, BigNumber] & {
        lendgine: string;
        base: string;
        speculative: string;
        baseScaleFactor: BigNumber;
        speculativeScaleFactor: BigNumber;
        upperBound: BigNumber;
      }
    >;
  };

  createLendgine(
    base: PromiseOrValue<string>,
    speculative: PromiseOrValue<string>,
    baseScaleFactor: PromiseOrValue<BigNumberish>,
    speculativeScaleFactor: PromiseOrValue<BigNumberish>,
    upperBound: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getLendgine(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>,
    arg4: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  pair(overrides?: CallOverrides): Promise<string>;

  pairParameters(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, BigNumber, BigNumber] & {
      lendgine: string;
      base: string;
      speculative: string;
      baseScaleFactor: BigNumber;
      speculativeScaleFactor: BigNumber;
      upperBound: BigNumber;
    }
  >;

  callStatic: {
    createLendgine(
      base: PromiseOrValue<string>,
      speculative: PromiseOrValue<string>,
      baseScaleFactor: PromiseOrValue<BigNumberish>,
      speculativeScaleFactor: PromiseOrValue<BigNumberish>,
      upperBound: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    getLendgine(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    pair(overrides?: CallOverrides): Promise<string>;

    pairParameters(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, BigNumber] & {
        lendgine: string;
        base: string;
        speculative: string;
        baseScaleFactor: BigNumber;
        speculativeScaleFactor: BigNumber;
        upperBound: BigNumber;
      }
    >;
  };

  filters: {
    "LendgineCreated(address,address,uint256,uint256,uint256,address,address)"(
      base?: PromiseOrValue<string> | null,
      speculative?: PromiseOrValue<string> | null,
      baseScaleFactor?: null,
      speculativeScaleFactor?: null,
      upperBound?: PromiseOrValue<BigNumberish> | null,
      lendgine?: null,
      pair?: null
    ): LendgineCreatedEventFilter;
    LendgineCreated(
      base?: PromiseOrValue<string> | null,
      speculative?: PromiseOrValue<string> | null,
      baseScaleFactor?: null,
      speculativeScaleFactor?: null,
      upperBound?: PromiseOrValue<BigNumberish> | null,
      lendgine?: null,
      pair?: null
    ): LendgineCreatedEventFilter;
  };

  estimateGas: {
    createLendgine(
      base: PromiseOrValue<string>,
      speculative: PromiseOrValue<string>,
      baseScaleFactor: PromiseOrValue<BigNumberish>,
      speculativeScaleFactor: PromiseOrValue<BigNumberish>,
      upperBound: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getLendgine(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pair(overrides?: CallOverrides): Promise<BigNumber>;

    pairParameters(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createLendgine(
      base: PromiseOrValue<string>,
      speculative: PromiseOrValue<string>,
      baseScaleFactor: PromiseOrValue<BigNumberish>,
      speculativeScaleFactor: PromiseOrValue<BigNumberish>,
      upperBound: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getLendgine(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairParameters(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
